@using DSRemapper.Core;
@using DSRemapper.DSLogger;
@using DSRemapper.RemapperCore;
@using DSRemapper.ConfigManager;
@using DSRemapper.Types;
@using Microsoft.AspNetCore.Components.Forms

@{
#pragma warning disable CS8974 //this is for call C# functions from onclick event
}

<div class="ctrl">
    <img>
    <div class="ctrl-main">
        <div class="title"><label><InputCheckbox @bind-Value=active /> @Name - @Type</label></div>
        <div class="description">@InfoLine</div>
        <select class="profile-list" onchange="@UpdateProfile">
            <option value="">Select a profile</option>
            @foreach (string op in ProfileManager.GetProfiles())
            {
                <option value="@op">@op</option>
            }
        </select>
        <div class="console">@ConsoleText</div>
    </div>
    <div class="buttons">
        <button onclick="@Remapper.Start" >Connect</button>
        <button onclick="@Remapper.Stop" >Disconnect</button>
        <button onclick="@ShowInputTest" >Input Test</button>
    </div>
</div>

@code {
    private bool active = false;

    [Parameter, EditorRequired]
    public Remapper Remapper { get; set; } = null!;

    public static DSForm<InputTest>? inputTest = null;

    private string Name => Remapper.Name;
    private string Type => Remapper.Type;
    private string InfoLine = "";
    private string ConsoleText = "";

    private List<string> options = new()
    {
        "test1",
        "test2",
        "test3",
        "test4",
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            Remapper.OnRead += OnControllerRead;
        }
    }

    private void OnControllerRead(DSInputReport report)
    {
        ConsoleText = $@"Battery: {report.Battery}
LX: {report.LX}
LY: {report.Grav}
RX: {report.Touch[0].Pressed}
RY: {report.Touch[0].Pos}
Sq: {report.Square}
Cr: {report.Cross}
Ci: {report.Circle}
Tr: {report.Triangle}";
        this.InvokeAsync(() => { 
            StateHasChanged();
        });
    }

    private void UpdateProfile(ChangeEventArgs e)
    {

    }

    public void ShowInputTest()
    {
        if (inputTest == null || inputTest.IsDisposed)
        {
            inputTest = new DSForm<InputTest>(new Dictionary<string, object?>()
            {
                {"Remapper", Remapper},
            });

            inputTest.Show();
        }
        else
        {
            if (inputTest.WindowState == FormWindowState.Minimized)
                inputTest.WindowState = FormWindowState.Normal;
            inputTest.Focus();
        }
    }

}
