@using DSRemapper.Core;
@using DSRemapper.DSLogger;
@using DSRemapper.RemapperCore;
@using DSRemapper.ConfigManager;
@using DSRemapper.Types;
@using Microsoft.AspNetCore.Components.Forms

@{
#pragma warning disable CS8974 //this is for call C# functions from onclick event
}

<div class="ctrl">
    <img>
    <div class="ctrl-main">
        <div class="title"><label><InputCheckbox @bind-Value=Active />@Name - @Type</label></div>
        <div class="description">@InfoLine @Remapper.OnReadSubscriptors</div>
        <select class="profile-list" value="@Remapper.CurrentProfile" onchange="@UpdateProfile">
            <option value="">Select a profile</option>
            @foreach (string op in ProfileManager.GetProfiles())
            {
                <option value="@op">@op</option>
            }
        </select>
        <div class="console">@ConsoleText</div>
    </div>
    <div class="buttons">
        <button onclick="@Remapper.Start" >Connect</button>
        <button onclick="@Remapper.Stop" >Disconnect</button>
        <button onclick="@ShowInputTest" >Input Test</button>
    </div>
</div>

@code {
    private bool active;

    private bool Active
    {
        get => active;
        set
        {
            if (value)
            {
                Remapper.Start();
            }
            DSConfig.SetAutoConnect(Remapper.Id,value);
            active = value;
        }
    }

    [Parameter, EditorRequired]
    public Remapper Remapper { get; set; } = null!;

    public static DSForm<InputTest>? inputTest = null;

    private string Name => Remapper.Name;
    private string Type => Remapper.Type;
    private string InfoLine = "";
    private string ConsoleText = "";

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //Remapper.OnRead += OnControllerRead;
            Remapper.OnLog += RemapperOnLog;
            RemapperConfig config = DSConfig.GetConfig(Remapper.Id);
            Active = config.AutoConnect;
            SetProfile(config.LastProfile);
            StateHasChanged();
        }
    }

    private void SetProfile(string profile)
    {
        Remapper.SetProfile(profile);
    }
    private void RemapperOnLog(RemapperEventType type, string message)
    {
        switch (type)
        { // == RemapperEventType.DeviceConsole
            case RemapperEventType.DeviceConsole:
                ConsoleText = message;
                break;
            case RemapperEventType.Warning:
                Logger.LogWarning(message);
                break;
            case RemapperEventType.Error:
                Logger.LogError(message);
                break;
        }

        this.InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    /*private void OnControllerRead(DSInputReport report)
    {
        ConsoleText = $@"Battery: {report.Battery}
LX: {report.LX}
LY: {report.Grav}
RX: {report.Touch[0].Pressed}
RY: {report.Touch[0].Pos}
Sq: {report.Square}
Cr: {report.Cross}
Ci: {report.Circle}
Tr: {report.Triangle}";
        this.InvokeAsync(() => { 
            StateHasChanged();
        });
    }*/

    private void UpdateProfile(ChangeEventArgs e)
    {
        string profile = e.Value?.ToString() ?? "";
        SetProfile(profile);
        DSConfig.SetLastProfile(Remapper.Id, profile);
        Logger.Log($"{Remapper.Id} selected profile {profile}");
    }

    public void ShowInputTest()
    {
        if (inputTest == null || inputTest.IsDisposed)
        {
            inputTest = new DSForm<InputTest>(new Dictionary<string, object?>()
            {
                {"Remapper", Remapper},
            });

            inputTest.Show();
        }
        else
        {
            if (inputTest.WindowState == FormWindowState.Minimized)
                inputTest.WindowState = FormWindowState.Normal;
            inputTest.Focus();
        }
    }

}
