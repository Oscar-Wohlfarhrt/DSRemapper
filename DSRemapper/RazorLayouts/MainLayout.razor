@page "/"
@using DSRemapper.ConfigManager;
@using DSRemapper.Core;
@using DSRemapper.DSLogger;
@using Microsoft.JSInterop;

@inject IJSRuntime JS
@implements IDisposable

@{
    //
    #pragma warning disable CS8974 //this is for call C# functions from onclick event
}
@functions {
    ElementReference footer;

    void SetHTML(string html)
    {
        JS.InvokeVoidAsync("SetHTML", new object[] { footer, html });
    }
}

<div id="nav">
    <button onclick="bridge.LogWarning('Not working')">File</button>
    <button onclick="@DSBridge.WindowsControllers">Windows controllers</button>
    <button onclick="@DSBridge.LogConsole">Log console</button>
    <span>@RemapperCore.RemapperCore.remappers.Count</span>
    <span>@Logger.Subcribers</span>
</div>
<div id="main">
    <div id="controller-list">
        @foreach(var rmp in RemapperCore.RemapperCore.remappers)
        {
            <ControllerItem Remapper="rmp" />
        }
    </div>
</div>
<div @ref=footer id="footer">
</div>

@code{
    private void ControllersUpdate(List<RemapperCore.Remapper> remappers)
    {
        this.InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
#if DEBUG
    DSBridge.LogConsole();
#endif
            Logger.OnLog += Logger_OnLog;

            RemapperCore.RemapperCore.OnUpdate += ControllersUpdate;
            RemapperCore.RemapperCore.StartScanner();
        }
    }
    private void Logger_OnLog(Logger.LogEntry entry)
    {
        SetHTML($"<{entry.Level} class='mono-space'>{entry.Message}</{entry.Level}>");
    }

    public void Dispose()
    {
        Logger.OnLog -= Logger_OnLog;
    }
}
